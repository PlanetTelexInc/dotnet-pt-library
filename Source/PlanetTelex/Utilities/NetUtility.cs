using System;
using System.Net;
using System.Net.Mail;
using PlanetTelex.Common.Models;
using PlanetTelex.Extensions;
using PlanetTelex.Properties;

namespace PlanetTelex.Utilities
{
    /// <summary>
    /// Utility methods for basic networking operations.
    /// </summary>
    public class NetUtility
    {
        #region Email Methods

        /// <summary>
        /// Sends an email from the SMTP server specified in the application configuration file.
        /// </summary>
        /// <param name="toSend">The email to send.</param>
        /// <param name="message">A message generated by this method.</param>
        /// <param name="exception">The SMTP exception should one occur.</param>
        /// <returns><c>true</c> if the email sent successfully; otherwise, <c>false</c>.</returns>
        public virtual bool SendEmail(Email toSend, out string message, out SmtpException exception)
        {
            bool returnVal = false;
            exception = null;
            message = null;
            SmtpClient sendMessage = new SmtpClient();
            MailMessage email = new MailMessage(toSend.EmailFrom, toSend.EmailTo, toSend.Subject, toSend.EmailMessage) { IsBodyHtml = toSend.IsHtml };

            if (toSend.CC != null && toSend.CC.Length > 0)
                foreach (string cc in toSend.CC)
                    email.CC.Add(new MailAddress(cc));
                
            if (toSend.EmailAttachments != null && toSend.EmailAttachments.Length > 0)
                foreach (Attachment attachment in toSend.EmailAttachments)
                    email.Attachments.Add(attachment);

            try
            {
                sendMessage.Send(email);
                returnVal = true;
                message = Resources.EmailMessageSent.FormatWith(toSend.Subject, toSend.EmailFrom, toSend.EmailTo);
            }
            catch (SmtpException e)
            {
                exception = e;
                message = Resources.EmailMessageNotSent.FormatWith(toSend.Subject, toSend.EmailFrom, toSend.EmailTo);
            }
            return returnVal;
        }

        #endregion

        #region Web Methods

        /// <summary>
        /// Pings the specified URL, returning true only if the responding http status code is OK (200).
        /// </summary>
        /// <param name="toPing">The URL to ping.</param>
        /// <returns><c>true</c> if the URL returned status code 200 when requested; otherwise, <c>false</c>.</returns>
        public virtual bool PingUrl(string toPing)
        {
            if (toPing == null)
                throw new ArgumentNullException("toPing");

            if (!toPing.StartsWith("http://") || !toPing.StartsWith("https://"))
                toPing = "http://" + toPing;

            if (!toPing.IsValidUri())
                throw new ArgumentException(Resources.InvalidUri, "toPing");

            try
            {
                HttpWebRequest myRequest = (HttpWebRequest)WebRequest.Create(toPing);
                myRequest.Method = "GET";
                myRequest.ContentType = "application/x-www-form-urlencoded";
                HttpWebResponse httpWebResponse = (HttpWebResponse)myRequest.GetResponse();
                return httpWebResponse.StatusCode == HttpStatusCode.OK;
            }
            catch
            {
                return false;
            }
        }

        #endregion
    }
}
